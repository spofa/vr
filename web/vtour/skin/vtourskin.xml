<krpano>

	<!-- skin settings (can be overridden in the tour.xml) -->
	<skin_settings maps="false"
				   maps_type="bing"
				   maps_bing_api_key=""
				   maps_zoombuttons="false"
				   gyro="true"
				   webvr="true"
				   littleplanetintro="false"
				   title="false"
				   thumbs="true"
				   thumbs_width="120" thumbs_height="80" thumbs_padding="10" thumbs_crop="0|40|240|160"
				   thumbs_opened="false"
				   thumbs_text="true"
				   thumbs_dragging="true"
				   thumbs_onhoverscrolling="false"
				   thumbs_scrollbuttons="false"
				   thumbs_scrollindicator="false"
				   thumbs_loop="false"
				   tooltips_buttons="false"
				   tooltips_thumbs="false"
				   tooltips_hotspots="false"
				   tooltips_mapspots="false"
				   deeplinking="false"
				   loadscene_flags="MERGE"
				   loadscene_blend="OPENBLEND(0.5, 0.0, 0.75, 0.05, linear)"
				   loadscene_blend_prev="SLIDEBLEND(0.5, 180, 0.75, linear)"
				   loadscene_blend_next="SLIDEBLEND(0.5,   0, 0.75, linear)"
				   loadingtext="加载中..."
				   layout_width="100%"
				   layout_maxwidth="814"
				   controlbar_width="-24"
				   controlbar_height="40"
				   controlbar_offset="20"
				   controlbar_offset_closed="-40"
				   controlbar_overlap.no-fractionalscaling="10"
				   controlbar_overlap.fractionalscaling="0"
				   design_skin_images="vtourskin.png"
				   design_bgcolor="0x2D3E50"
				   design_bgalpha="0.8"
				   design_bgborder="0"
				   design_bgroundedge="1"
				   design_bgshadow="0 4 10 0x000000 0.3"
				   design_thumbborder_bgborder="3 0xefab3e 1.0"
				   design_thumbborder_padding="2"
				   design_thumbborder_bgroundedge="4"
				   design_text_css="color:#FFFFFF; font-family:Microsoft yahei;"
				   design_text_shadow="1"
	/>


	<!-- save the url path of this xml file (the url value will be adjusted during xml parsing) -->
	<vtourskinxmlpath url="./" />


	<!-- mouse / touch / keyboard(button) control settings - http://krpano.com/docu/xml/#control -->
	<control mouse="drag"
			 touch="drag"
			 zoomtocursor="false"
			 zoomoutcursor="false"
			 draginertia="0.1"
			 dragfriction="0.9"
			 movetoaccelerate="1.0"
			 movetospeed="10.0"
			 movetofriction="0.8"
			 keybaccelerate="0.09"
			 keybfriction="0.94"
			 keybfovchange="0.25"
			 mousefovchange="1.0"
			 fovspeed="3.0"
			 fovfriction="0.9"
			 bouncinglimits="true"
	/>

	<!-- mouse cursors - http://krpano.com/docu/xml/#cursors -->
	<cursors standard="default"
			 dragging="move"
			 moving="move"
	/>


	<!-- ensure stagescale 2x for mobile devices (regardless if mobilescale is 0.5 or 1.0) -->
	<krpano stagescale="calc:stagescale * 2" if="stagescale LT 1.0" devices="mobile" />


	<!-- include VR support - http://krpano.com/plugins/webvr/ -->
	<include url="%SWFPATH%/plugins/webvr.xml" devices="html5" />

	<!-- overwrite some settings from the webvr.xml for the skin integration -->
	<plugin name="WebVR" keep="true" devices="html5"
			pluginurl="%SWFPATH%/plugins/webvr.js"
			url=""
			multireslock.desktop="true"
			multireslock.mobile.or.tablet="false"
			mobilevr_support="true"
			mobilevr_fake_support="true"
			onavailable="removelayer(webvr_enterbutton); skin_arrange_buttons(); webvr_onavailable();"
			onentervr="skin_showloading(false); webvr_onentervr(); webvr_setup(); skin_reloadscene_webvr();if(autorotate.enabled==true,switch_xuanzhuan(););"
			onexitvr="webvr_onexitvr(); webvr_setup(); skin_reloadscene_webvr();"
	/>

	<!-- webvr button style (adjust to match skin style) -->
	<style name="webvr_button_style"
		   border="false"
		   roundedge="calc:1.0"
		   backgroundcolor="get:skin_settings.design_bgcolor" backgroundalpha="get:skin_settings.design_bgalpha"
		   shadow="0.01" shadowrange="10.0" shadowangle="90.0" shadowcolor="0x30261B" shadowalpha="0.50"
		   css="calc:skin_settings.design_text_css + ' color:#FFFFFF;font-size:' + 20*webvr_setup_scale*webvr_button_scale + 'px;'"
	/>

	<!-- show a 'rotate the device' info when the mobile device is in portrait orientation in VR mode -->
	<layer name="webvr_rotate_to_landscape_request" keep="true" vr="true" devices="mobile"
		   url="rotate_device.png" scale="0.5"
		   align="top" edge="center" y="28%"
		   autoalpha="true" alpha="0.0"
		   enabled="false"
	/>

	<events name="webvr_events" keep="true" devices="html5"
			onresize.mobile="webvr_act_as_gyro_in_portrait_mode();"
			onviewchange=""
	/>

	<action name="webvr_setup">
		if(webvr.isenabled,
		copy(loadscene_flags_backup, skin_settings.loadscene_flags);
		set(skin_settings.loadscene_flags, MERGE|KEEPVIEW|KEEPMOVING|NOPREVIEW);
		webvr_act_as_gyro_in_portrait_mode(true);
		if(scene.count GT 1,
		set(hotspot[webvr_prev_scene].visible, true);
		set(hotspot[webvr_next_scene].visible, true);
		set(events[webvr_events].onviewchange, webvr_menu_following());
		);
		,
		if(loadscene_flags_backup !== null, copy(skin_settings.loadscene_flags, loadscene_flags_backup));
		tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
		set(hotspot[webvr_prev_scene].visible, false);
		set(hotspot[webvr_next_scene].visible, false);
		set(events[webvr_events].onviewchange, null);
		);
	</action>

	<action name="webvr_act_as_gyro_in_portrait_mode">
		if(device.mobile AND webvr.isenabled,
		div(aspect, stagewidth, stageheight);
		if(aspect != lastaspect OR '%1' == 'true',
		copy(lastaspect, aspect);
		if(stagewidth GT stageheight,
		<!-- landscape orientation - use stereo rendering and a direct/fast gyro sensor mode -->
		set(display.stereo, true);
		set(webvr.mobilevr_sensor_mode, 3);
		webvr.update();
		tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 0.0);
		,
		<!-- portrait orientation - use normal rendering and a smoother/slower gyro sensor mode -->
		set(display.stereo, false);
		set(webvr.mobilevr_sensor_mode, 1);
		webvr.update();
		tween(layer[webvr_rotate_to_landscape_request].alpha, 1.0);
		delayedcall(3.0, tween(layer[webvr_rotate_to_landscape_request].alpha, 0.0, 1.0); );
		);
		);
		,
		set(lastaspect, 0);
		);
	</action>

	<!-- VR scene switching hotspots -->
	<style name="webvr_menu_style" depth="800" scale="0.5" distorted="true" ath="0" atv="45" alpha="0.5" />
	<hotspot name="webvr_prev_scene" keep="true" style="skin_base|webvr_menu_style" crop="0|64|64|64"  ox="-64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(-1);" visible="false" devices="html5.and.webgl" />
	<hotspot name="webvr_next_scene" keep="true" style="skin_base|webvr_menu_style" crop="64|64|64|64" ox="+64" onover="tween(scale,0.6);" onout="tween(scale,0.5);" vr_timeout="750" onclick="skin_nextscene_loop(+1);" visible="false" devices="html5.and.webgl" />

	<!-- floating/following VR hotspots -->
	<action name="webvr_menu_following" type="Javascript" devices="html5"><![CDATA[
		var hs1 = krpano.get("hotspot[webvr_prev_scene]");
		var hs2 = krpano.get("hotspot[webvr_next_scene]");
		if(!hs1.hovering && !hs2.hovering)
		{
			var f = 0.01;	// following speed factor
			var h = krpano.view.hlookat;
			var v = krpano.view.vlookat;
			var hsh = hs1.ath;
			var hsv = hs1.atv;
			h   = (h  -(h|0))   + (((h|0)  +360180)%360) - 180.0;
			v   = (v  -(v|0))   + (((v|0)  +360180)%360) - 180.0;
			hsh = (hsh-(hsh|0)) + (((hsh|0)+360180)%360) - 180.0;
			var dh = h - hsh;
			dh += (dh > 180) ? -360 : (dh < -180) ? 360 : 0
			hsh += dh*f;
			var a = Math.abs(v - hsv) / 90.0;
			a = 1.0 * Math.max(1.0 - 2.0*Math.sqrt(a), 0);
			v = v + 55.0 - v*1.5;
			hsv = hsv*(1.0 - f) + v*f;
			hs1.ath = hs2.ath = hsh;
			hs1.atv = hs2.atv = hsv;
			hs1.alpha = hs2.alpha = a;
		}
	]]></action>
	<!-- VR support -->



	<!-- skin styles -->

	<!-- skin_base - the base skin image -->
	<style name="skin_base" url="calc:vtourskinxmlpath.url + skin_settings.design_skin_images" />


	<!-- skin_glow - button glowing (if additional ondown,onup,onout,over events are needed, this style provides ondown2,onup2,onover2,onout2 events) -->
	<style name="skin_glow"
		   ondown="copy(skin_lockglow,name); skin_buttonglow(get(name)); if(ondown2, ondown2() );"
		   onover="if(skin_lockglow === null, copy(skin_lockglow,name); skin_buttonglow(get(name),0.3) ); if(onover2, onover2() );"
		   onout="if(skin_lockglow === name AND !pressed, skin_buttonglow(null);delete(skin_lockglow); ); if(onout2, onout2() );"
		   onup="if(onup2, onup2()); delayedcall(0, if(hovering AND enabled, skin_buttonglow(get(name),0.3); , skin_buttonglow(null);delete(skin_lockglow); ); );"
	/>

	<!-- skin_thumbtext_style - style/textfield for the (optional, skin_settings.thumbs_text) thumbnails texts -->
	<style name="skin_thumbtext_style" url="%SWFPATH%/plugins/textfield.swf" align="bottom" width="100%" height="24" y="0" enabled="false" background="true" backgroundcolor="0x000000" backgroundalpha="0.5" border="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:13px;'" textshadow="get:skin_settings.design_text_shadow" />

	<!-- hotspot style predefines - white hotspot -->
	<style name="skin_hotspotstyle"
		   url="vtourskin_hotspot.png"
		   crop="0|0|128|128"
		   framewidth="128" frameheight="128" frame="0" lastframe="24"
		   scale="0.5"
		   tooltip=""
		   onclick="if(linkedscene, skin_hidetooltips(); skin_hidehotspot_vr(); tween(scale,0.25,0.5); tween(oy,-20,0.5); tween(alpha,0,0.5); looktohotspot(); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); );"
		   onloaded="hotspot_animate();addhotspot_txt();switch(fullscreen);"/>

	<!-- hotspot animation action -->
	<action name="hotspot_animate">
		inc(frame,1,get(lastframe),0);
		mul(ypos,frame,frameheight);
		txtadd(crop,'0|',get(ypos),'|',get(framewidth),'|',get(frameheight));
		delayedcall(0.03, if(loaded, hotspot_animate() ) );
	</action>

	<!-- 添加箭头文字图片 /pic.php -->
	<action name="addhotspot_txt">
		txtadd(hotspot_txt,get(name),'_vr');
		addhotspot(get(hotspot_txt));
		txtadd(pic_url,'/pic.php?word=',get(scene[get(linkedscene)].title));
		set(hotspot[get(hotspot_txt)].url,get(pic_url));
		set(hotspot[get(hotspot_txt)].zoom,false);
		set(hotspot[get(hotspot_txt)].distorted,true);
		set(hotspot[get(hotspot_txt)].depth,10000);
		set(hotspot[get(hotspot_txt)].scale,13);
		set(hotspot[get(hotspot_txt)].oy,-500);
		set(hotspot[get(hotspot_txt)].ath,get(ath));
		set(hotspot[get(hotspot_txt)].atv,get(atv));
		set(hotspot[get(hotspot_txt)].enabled,false);
	</action>

	<!-- skin layout -->
	<layer name="skin_layer" keep="true" type="container" align="top" width="100%" height="100%" maskchildren="true" visible="false" bgcapture="false" zorder="1">
		<!--显示场景缩略滚动 -->
		<layer name="skin_thumbs_btn_container" type="container" keep="true" align="leftbottom" width="80" height="100" x="20" y="0">
			<layer name="skin_thumbs_btn_ico" style="skin_base|skin_glow" crop="0|128|64|64"  align="center"  scale="0.5" ondown2="skin_showthumbs();"/>
			<layer name="skin_thumbs_btn_tit" type="text" url="%SWFPATH%/plugins/textfield.swf" background="false" align="center" y="30" html="场景选择" css="color:#ffffff;"/>
		</layer>
		<!-- 显示全屏按钮 -->
		<layer name="skin_fs_btn_container" type="container" keep="true" align="leftbottom" width="80" height="100" x="80" y="0">
			<layer name="skin_fs_btn_ico" style="skin_base|skin_glow" crop="0|576|64|64"  align="center"  scale="0.5" onclick="switch(fullscreen);"/>
			<layer name="skin_fs_btn_tit" type="text" url="%SWFPATH%/plugins/textfield.swf" background="false" align="center" y="30" html="全屏观看" css="color:#ffffff;"/>
		</layer>
		<!-- 显示自动旋转 -->
		<layer name="skin_xz_btn_container" type="container" keep="true" align="leftbottom" width="80" height="100" x="155" y="0">
			<layer name="skin_xz_btn_ico" style="skin_base|skin_glow" crop="0|384|64|64"  align="center"  scale="0.5" onclick="switch_xuanzhuan();" />
			<layer name="skin_xz_btn_tit" type="text" url="%SWFPATH%/plugins/textfield.swf" background="false" align="center" y="30" html="自动旋转" css="color:#ffffff;"/>
		</layer>
		<!-- 显示vr按钮 -->
		<layer name="skin_vr_btn_container" type="container" keep="true" align="rightbottom" width="80" height="100" x="20" y="0">
			<layer name="skin_vr_btn_ico"  style="skin_base|skin_glow" crop="0|0|80|64" align="center" scale="0.5" onclick="webvr.enterVR();" visible="true" />
			<layer name="skin_vr_btn_tit" type="text" url="%SWFPATH%/plugins/textfield.swf" background="false" align="center" y="30" html="VR模式" css="color:#ffffff;"/>
		</layer>
		<!-- 显示评论按钮 -->
		<!--<layer name="skin_co_btn_container" type="container" keep="true" align="righttop" width="80" height="100" x="10" y="80">
			<layer name="skin_co_btn_ico" style="skin_glow" url="%SWFPATH%/skin/comment.png"  align="center"  scale="0.5" onclick="add_comment();" />
			<layer name="skin_co_btn_tit" type="text" url="%SWFPATH%/plugins/textfield.swf" background="false" align="center" y="30" html="说一说" css="color:#ffffff;"/>
		</layer>-->
		<!-- 显示赞 -->
		<!--<layer name="skin_zan_btn_container" type="container" keep="true" align="righttop" width="80" height="100" x="10" y="0">
			<layer name="skin_zan_btn_ico" style="skin_glow" url="%SWFPATH%/skin/zan.png"  align="center"  scale="0.5" onclick="js(doZan());" />
			<layer name="skin_zan_btn_tit" type="text" url="%SWFPATH%/plugins/textfield.swf" background="false" align="center" y="30" html="赞" css="color:#ffffff;"/>
		</layer>-->
		<!-- 显示声音 -->
		<layer name="skin_bgm_btn_container" type="container" keep="true" align="righttop" width="80" height="100" x="10" y="160" visible="false">
			<layer name="skin_bgm_btn_ico"  style="skin_base|skin_glow" crop="66|715|64|64" align="center" scale="0.5" onclick="switch_bgm();" visible="true" />
		</layer>

		<layer name="skin_radar_btn_container" type="container" keep="true" align="righttop" width="80" height="100" x="10" y="260" visible='false'>
			<layer name="skin_radar_btn_ico" style="skin_glow" url="%SWFPATH%/skin/radar_ico.png"  align="center"  scale="0.5" onclick="toggle(layer[mapcontainer].visible)" />
			<layer name="skin_radar_btn_tit" type="text" url="%SWFPATH%/plugins/textfield.swf" background="false" align="center" y="30" html="沙盘" css="color:#ffffff;"/>
		</layer>




		<!-- 访问量 -->
		<!--<layer name="skin_visit_btn_container" type="container" keep="true" align="leftttop" width="104" height="50" x="10" y="0" visible="true">
			<layer name="skin_visit_btn_ico" url="%SWFPATH%/skin/visit.png" align="left" scale="0.4" visible="true" />
			<layer name="skin_visit_num" type="text" align="left" x="30" url="%SWFPATH%/plugins/textfield.swf" html="人气" background="false" css="color:#ffffff;font-size:14px;font-family:microsoft yahei;"/>
		</layer>-->
		<!-- 场景缩略滚动 -->
		<layer name="skin_thumbs_container" type="container" keep="true" bgcolor="0x000000" bgalpha="0.3" align="bottom" width="100%" height="100" y="-100" visible="true" maskchildren="true">
			<layer name="skin_thumbs_scrollleft"  style="skin_base|skin_glow" crop="0|64|64|64"  align="lefttop"  edge="left"  x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(+2,0));" visible="false" />
			<layer name="skin_thumbs_scrollright" style="skin_base|skin_glow" crop="64|64|64|64" align="righttop" edge="right" x="5" y="50" scale="0.5" zorder="2" alpha="1.0" ondown2="asyncloop(pressed, layer[skin_thumbs].scrollby(-2,0));" visible="false" />
			<layer name="skin_thumbs_scrollindicator" type="container" bgcolor="0xFFFFFF" bgalpha="0.25" align="lefttop" width="0" y="100" height="2" visible="false" enabled="false" />
			<layer name="skin_thumbs" state="closed" url.flash="%SWFPATH%/plugins/scrollarea.swf" url.html5="%SWFPATH%/plugins/scrollarea.js" direction="h" align="top" width="100%" height="100" zorder="1" onloaded="skin_updatescroll();" onscroll="skin_updatethumbscroll();" />
		</layer>

		<layer name="skin_loadingtext" url="%SWFPATH%/plugins/textfield.swf" align="center" x="5" y="-5" html="get:skin_settings.loadingtext" visible="false" autoheight="true" background="false" border="false" enabled="false" css="calc:skin_settings.design_text_css + ' text-align:center; font-size:18px;'" textshadow="get:skin_settings.design_text_shadow" />
		<layer name="skin_buttonglow"  style="skin_base" crop="64|384|64|64" align="center" x="0" y="1" scale="1.0" alpha="0.0" visible="false" enabled="false" />
		<layer name="skin_thumbborder" type="container" x="get:skin_settings.design_thumbborder_padding" y="get:skin_settings.design_thumbborder_padding" width="calc:skin_settings.thumbs_width - 2*skin_settings.design_thumbborder_padding" height="calc:skin_settings.thumbs_height - 2*skin_settings.design_thumbborder_padding" visible="false" enabled="false" align="lefttop" bgborder="get:skin_settings.design_thumbborder_bgborder" bgroundedge="get:skin_settings.design_thumbborder_bgroundedge" />
	</layer>


	<!-- gyro plugin -->
	<plugin name="skin_gyro" keep="true" url="" html5_url="%SWFPATH%/plugins/gyro2.js" devices="html5" enabled="false" onavailable="skin_arrange_buttons();" />


	<!-- skin events -->
	<events name="skin_events" keep="true"
			onxmlcomplete="set(events[skin_events].onxmlcomplete,null); skin_startup();"
			onnewpano="skin_showloading(true); skin_update_scene_infos(); skin_deeplinking_update_url();"
			onremovepano="skin_showloading(true);"
			onloadcomplete="skin_showloading(false);"
			onidle="skin_deeplinking_update_url();"
			onresize="skin_onresize();"
			onenterfullscreen.fullscreensupport="set(layer[skin_fs_btn_ico].crop, '64|576|64|64');"
			onexitfullscreen.fullscreensupport="set(layer[skin_fs_btn_ico].crop, '0|576|64|64');"
			onkeydown="skin_keydown_event();"
	/>


	<!-- skin actions -->
	<action name="skin_startup">

		<!-- apply skin settings on startup -->
		if(skin_settings.thumbs,
		if(skin_settings.thumbs_opened, set(layer[skin_thumbs].state,'opened'); set(layer[skin_thumbs_container].visible,true); );
		copy(layer[skin_thumbs].draggable, skin_settings.thumbs_dragging);
		if(skin_settings.thumbs_onhoverscrolling AND device.mouse,
		set(layer[skin_thumbs].draggable, false);
		set(layer[skin_thumbs].onhover_autoscrolling, true);
		);
		);

		if(skin_settings.gyro AND !device.desktop AND device.html5,
		copy(plugin[skin_gyro].url, plugin[skin_gyro].html5_url);
		);

		if(skin_settings.webvr AND device.html5 AND device.webgl,
		copy(plugin[WebVR].url, plugin[WebVR].pluginurl);
		);

		if(skin_settings.maps == true,
		set(layer[skin_btn_map].visible, true);

		if(device.flash,
		copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
		set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.swf');
		,
		if(skin_settings.maps_type == 'bing',
		copy(layer[skin_map].key, skin_settings.maps_bing_api_key);
		set(layer[skin_map].url, '%SWFPATH%/plugins/bingmaps.js');
		,
		set(layer[skin_map].url, '%SWFPATH%/plugins/googlemaps.js');
		);
		);
		);

		if(skin_settings.littleplanetintro AND (device.webgl OR device.flash),
		skin_setup_littleplanetintro();
		);

		skin_addthumbs();
		skin_onresize();
		skin_updatescroll();

		set(layer[skin_layer].visible, true);
	</action>


	<action name="skin_addthumbs">
		if(skin_settings.thumbs == false,
		set(layer[skin_btn_thumbs].visible,false);
		,
		copy(thumbwidth, skin_settings.thumbs_width);
		copy(thumbheight, skin_settings.thumbs_height);
		copy(thumbpadding, skin_settings.thumbs_padding);
		copy(thumbcrop, skin_settings.thumbs_crop);

		add(thumbxoffset, thumbwidth, thumbpadding);
		mul(thumbxcenter, thumbxoffset, 0.5);
		mul(thumbbarwidth, thumbxoffset, scene.count);
		add(thumbbarwidth, thumbpadding);
		add(thumbbarheight, thumbpadding, thumbheight);
		add(thumbbarheight, thumbpadding);

		if(skin_settings.thumbs_scrollindicator,
		copy(layer[skin_thumbs_scrollindicator].y, thumbbarheight);
		add(thumbbarheight, layer[skin_thumbs_scrollindicator].height);
		);

		copy(layer[skin_thumbs].height, thumbbarheight);
		copy(layer[skin_thumbs].width, thumbbarwidth);

		mul(halfheight, thumbbarheight, 0.5);
		copy(layer[skin_thumbs_scrollleft].y, halfheight);
		copy(layer[skin_thumbs_scrollright].y, halfheight);

		set(thumb_cnt,0);
		for(set(i,0), i LT scene.count, inc(i),
		inc(thumb_cnt);
		txtadd(thumbname,'skin_thumb_',get(i));
		addlayer(get(thumbname));
		copy(layer[get(thumbname)].url, scene[get(i)].thumburl);
		set(layer[get(thumbname)].keep, true);
		set(layer[get(thumbname)].parent, 'skin_thumbs');
		set(layer[get(thumbname)].align, lefttop);
		copy(layer[get(thumbname)].crop, thumbcrop);
		copy(layer[get(thumbname)].width, thumbwidth);
		copy(layer[get(thumbname)].height, thumbheight);
		mul(thumbx, i, thumbxoffset);
		add(thumbx, thumbpadding);
		copy(layer[get(thumbname)].x, thumbx);
		copy(layer[get(thumbname)].y, thumbpadding);
		add(scene[get(i)].thumbx, thumbx, thumbxcenter);
		copy(scene[get(i)].thumby, thumbpadding);
		set(layer[get(thumbname)].linkedscene, get(scene[get(i)].name) );
		set(layer[get(thumbname)].onclick, copy(layer[skin_thumbborder].parent, name); loadscene(get(linkedscene),null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); );
		if(skin_settings.tooltips_thumbs,
		set(layer[get(thumbname)].tooltip, get(scene[get(i)].title) );
		layer[get(thumbname)].loadstyle(skin_tooltips);
		);
		if(skin_settings.thumbs_text,
		txtadd(thumbtext, 'skin_thumbtext_', get(i));
		addlayer(get(thumbtext));
		layer[get(thumbtext)].loadstyle(skin_thumbtext_style);
		set(layer[get(thumbtext)].keep, true);
		set(layer[get(thumbtext)].parent, get(thumbname));
		set(layer[get(thumbtext)].html, get(scene[get(i)].title));
		);
		);

		if(thumb_cnt == 1,
		set(layer[skin_thumbs].align, 'lefttop');
		);
		);
	</action>


	<action name="skin_addmapspots">
		for(set(i,0), i LT scene.count, inc(i),
		if(scene[get(i)].lat,
		txtadd(spotname, 'spot', get(i));
		txtadd(spotclickevent, 'skin_hidetooltips(); activatespot(',get(spotname),'); loadscene(', get(scene[get(i)].name), ',null,get(skin_settings.loadscene_flags),get(skin_settings.loadscene_blend)); skin_updatescroll(); delayedcall(0.5,skin_showmap(false));');
		copy(scene[get(i)].mapspotname, spotname);
		addspot(get(spotname), get(scene[get(i)].lat), get(scene[get(i)].lng), get(scene[get(i)].heading), false, get(spotclickevent), null);
		if(skin_settings.tooltips_mapspots,
		set(layer[skin_map].spot[get(spotname)].tooltip, get(scene[get(i)].title) );
		txtadd(layer[skin_map].spot[get(spotname)].onover, 'set(hovering,true);',  get(style[skin_tooltips].onover) );
		txtadd(layer[skin_map].spot[get(spotname)].onout,  'set(hovering,false);', get(style[skin_tooltips].onout)  );
		);
		);
		);

		if(xml.scene != null,
		activatespot( get(scene[get(xml.scene)].mapspotname) );
		,
		activatespot(spot0);
		);

		<!-- zoom and pan the map to see all spots at the same time -->
		zoomToSpotsExtent();
	</action>


	<action name="skin_setup_littleplanetintro">
		copy(lp_scene, xml.scene);
		copy(lp_hlookat, view.hlookat);
		copy(lp_vlookat, view.vlookat);
		copy(lp_fov, view.fov);
		copy(lp_fovmax, view.fovmax);
		copy(lp_limitview, view.limitview);
		set(view.fovmax, 170);
		set(view.limitview, lookto);
		set(view.vlookatmin, 90);
		set(view.vlookatmax, 90);
		lookat(calc(lp_hlookat - 180), 90, 150, 1, 0, 0);
		set(events[lp_events].onloadcomplete,
		delayedcall(0.5,
		if(lp_scene === xml.scene,
		set(control.usercontrol, off);
		copy(view.limitview, lp_limitview);
		set(view.vlookatmin, null);
		set(view.vlookatmax, null);
		tween(view.hlookat|view.vlookat|view.fov|view.distortion, calc('' + lp_hlookat + '|' + lp_vlookat + '|' + lp_fov + '|' + 0.0),
		3.0, easeOutQuad,
		set(control.usercontrol, all);
		tween(view.fovmax, get(lp_fovmax));
		);
		);
		);
		);
	</action>


	<action name="skin_onresize">
		mul(mh, area.pixelheight, -1);
		if(layer[skin_thumbs].state == 'opened', add(mh,layer[skin_thumbs].height); );
		if(layer[skin_map].state    == 'opened', sub(hh,area.pixelheight,skin_settings.controlbar_offset); sub(hh,layer[skin_control_bar].height); sub(hh,32); add(mh,hh); add(mh,skin_settings.controlbar_overlap); sub(mh, layer[skin_scroll_layer].y_offset); copy(layer[skin_map].height, hh); );
		add(mh, layer[skin_scroll_layer].y_offset);
		set(layer[skin_scroll_layer].y, get(mh));
		skin_video_updateseekbarwidth();
		skin_arrange_buttons();
	</action>


	<!-- determine the visibility of the buttons and calculate their positions -->
	<action name="skin_arrange_buttons">
		calc(show_selbuttons, scene.count GT 1);
		calc(show_thumbutton, skin_settings.thumbs == true);
		calc(show_mapbutton,  skin_settings.maps == true);
		calc(show_gyrobutton, plugin[skin_gyro].available == true AND view.vlookatrange == 180 );
		calc(show_vrbutton,   webvr.isavailable == true);
		calc(show_fsbutton,   device.fullscreensupport == true);

		set(lpos,6);
		set(cpos,0);
		if(show_gyrobutton, dec(cpos,20));
		if(show_vrbutton, dec(cpos,24));
		set(rpos,6);

		calc(show_dirbuttons, !device.mobile AND ((area.pixelwidth + 2*cpos) GT 520));

		copy(layer[skin_btn_navi].visible, show_dirbuttons);

		copy(layer[skin_btn_prev].visible, show_selbuttons);
		copy(layer[skin_btn_next].visible, show_selbuttons);
		if(show_selbuttons, inc(lpos,44); inc(rpos,44); );

		copy(layer[skin_btn_thumbs].visible, show_thumbutton);
		copy(layer[skin_btn_thumbs].x, lpos);
		if(show_thumbutton, inc(lpos,40));

		copy(layer[skin_btn_map].visible, show_mapbutton);
		copy(layer[skin_btn_map].x, lpos);
		if(show_mapbutton, inc(lpos,40));

		if(show_dirbuttons,
		copy(layer[skin_btn_navi].x, cpos);
		inc(cpos,140);

		set(layer[skin_btn_gyro].align, center);
		copy(layer[skin_btn_gyro].visible, show_gyrobutton);
		copy(layer[skin_btn_gyro].x, cpos);
		if(show_gyrobutton, inc(cpos,48));

		set(layer[skin_btn_vr].align, center);
		copy(layer[skin_btn_vr].visible, show_vrbutton);
		copy(layer[skin_btn_vr].x, cpos);
		if(show_vrbutton, inc(cpos,80));
		,
		set(layer[skin_btn_gyro].align, left);
		copy(layer[skin_btn_gyro].visible, show_gyrobutton);
		copy(layer[skin_btn_gyro].x, lpos);
		if(show_gyrobutton, inc(lpos,40));

		set(layer[skin_btn_vr].align, left);
		copy(layer[skin_btn_vr].visible, show_vrbutton);
		copy(layer[skin_btn_vr].x, lpos);
		if(show_vrbutton, inc(lpos,80));
		);

		copy(layer[skin_btn_hide].x, rpos);
		inc(rpos,40);

		copy(layer[skin_btn_fs].visible, show_fsbutton);
		copy(layer[skin_btn_fs].x, rpos);
		if(show_fsbutton, inc(rpos,40));
	</action>


	<action name="skin_updatescroll">
		if(layer[skin_thumbs].loaded,
		set(cursceneindex, 0);
		if(xml.scene, copy(cursceneindex, scene[get(xml.scene)].index));
		layer[skin_thumbs].setcenter(get(scene[get(cursceneindex)].thumbx), get(scene[get(cursceneindex)].thumby));
		);
	</action>


	<action name="skin_updatethumbscroll">
		copy(padding,skin_settings.thumbs_padding);

		if(skin_settings.thumbs_scrollbuttons,
		if(loverflow GT 0, set(layer[skin_thumbs_scrollleft].visible,true),  set(layer[skin_thumbs_scrollleft].visible,false) );
		if(roverflow GT 0, set(layer[skin_thumbs_scrollright].visible,true), set(layer[skin_thumbs_scrollright].visible,false) );
		);

		if(skin_settings.thumbs_scrollindicator,
		if(woverflow GT 0,
		set(layer[skin_thumbs_scrollindicator].visible,true);
		sub(iw,pixelwidth,woverflow);
		div(pw,iw,pixelwidth);
		div(px,loverflow,woverflow);
		mul(pw,iw);
		copy(layer[skin_thumbs_scrollindicator].width,pw);
		sub(iw,pw);
		sub(iw,padding);
		sub(iw,padding);
		mul(px,iw);
		add(px,padding);
		copy(layer[skin_thumbs_scrollindicator].x,px);
		,
		set(layer[skin_thumbs_scrollindicator].visible,false);
		);
		);
	</action>


	<action name="skin_update_scene_infos">
		if(xml.scene !== null AND scene[get(xml.scene)].index GE 0,

		if(skin_settings.title,
		if(title, txtadd(layer[skin_title].html, get(title), ' - ', get(scene[get(xml.scene)].title) ); , copy(layer[skin_title].html, scene[get(xml.scene)].title ); );
		delayedcall(0.1, set(layer[skin_title].visible,true) );
		);

		if(skin_settings.thumbs_loop == false,
		if(scene[get(xml.scene)].index GT 0,
		set(layer[skin_btn_prev].enabled, true);
		set(layer[skin_btn_prev].alpha, 1.0);
		,
		set(layer[skin_btn_prev].enabled, false);
		set(layer[skin_btn_prev].alpha, 0.3);
		);

		sub(lastsceneindex, scene.count, 1);
		if(scene[get(xml.scene)].index LT lastsceneindex,
		set(layer[skin_btn_next].enabled, true);
		set(layer[skin_btn_next].alpha, 1.0);
		,
		set(layer[skin_btn_next].enabled, false);
		set(layer[skin_btn_next].alpha, 0.3);
		);
		,
		if(scene.count GT 1,
		set(layer[skin_btn_prev].enabled, true);
		set(layer[skin_btn_prev].alpha, 1.0);
		set(layer[skin_btn_next].enabled, true);
		set(layer[skin_btn_next].alpha, 1.0);
		,
		set(layer[skin_btn_prev].enabled, false);
		set(layer[skin_btn_prev].alpha, 0.3);
		set(layer[skin_btn_next].enabled, false);
		set(layer[skin_btn_next].alpha, 0.3);
		);
		);

		if(scene.count GT 1,
		set(layer[skin_btn_prev_fs].visible, true);
		set(layer[skin_btn_next_fs].visible, true);
		,
		set(layer[skin_btn_prev_fs].visible, false);
		set(layer[skin_btn_next_fs].visible, false);
		);

		txtadd(parentname, 'skin_thumb_', get(scene[get(xml.scene)].index));
		if(layer[get(parentname)],
		set(layer[skin_thumbborder].parent, get(parentname));
		set(layer[skin_thumbborder].visible, true);
		,
		set(layer[skin_thumbborder].visible, false);
		);

		if(scene[get(xml.scene)].mapspotname,
		layer[skin_map].activatespot(get(scene[get(xml.scene)].mapspotname));
		layer[skin_map].pantospot(get(scene[get(xml.scene)].mapspotname));
		);

		if(plugin[skin_gyro].isavailable == true AND view.vlookatrange == 180,
		set(layer[skin_btn_gyro].visible, true);
		,
		set(layer[skin_btn_gyro].visible, false)
		);

		if(view.vlookatrange LT 180,
		if(backup_control_bouncinglimits === null,
		copy(backup_control_bouncinglimits, control.bouncinglimits);
		);
		set(control.bouncinglimits, false);
		,
		if(backup_control_bouncinglimits !== null,
		copy(control.bouncinglimits, backup_control_bouncinglimits);
		);
		);

		if(scene[get(xml.scene)].isvideopano AND plugin[video] !== null,
		skin_video_addcontrols();
		,
		skin_video_removecontrols();
		);
		);
	</action>


	<action name="skin_gotoscene">
		if(scene[%1],
		copy(cursceneindex, scene[get(xml.scene)].index);
		copy(newsceneindex, scene[%1].index);
		txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(newsceneindex LT cursceneindex ? skin_settings.loadscene_blend_prev : (newsceneindex GT cursceneindex ? skin_settings.loadscene_blend_next : skin_settings.loadscene_blend)));
		);
	</action>


	<action name="skin_nextscene">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		if(newsceneindex GE 0 AND newsceneindex LT scene.count,
		txtadd(layer[skin_thumbborder].parent, 'skin_thumb_', get(newsceneindex));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
		);
	</action>


	<action name="skin_nextscene_loop">
		add(newsceneindex, scene[get(xml.scene)].index, %1);
		sub(lastsceneindex, scene.count, 1);
		if(newsceneindex LT 0, copy(newsceneindex,lastsceneindex));
		if(newsceneindex GT lastsceneindex, set(newsceneindex,0));
		layer[skin_thumbs].scrolltocenter(get(scene[get(newsceneindex)].thumbx), get(scene[get(newsceneindex)].thumby));
		loadscene(get(scene[get(newsceneindex)].name),null,get(skin_settings.loadscene_flags),calc(%1 LT 0 ? skin_settings.loadscene_blend_prev : skin_settings.loadscene_blend_next));
	</action>


	<action name="skin_showloading">
		if(display.stereo == true,
		set(layer[skin_loadingtext].visible, false);
		,
		set(layer[skin_loadingtext].visible, %1);
		);
	</action>


	<action name="skin_hidetooltips">
		set(layer[skin_tooltip].alpha,0.0);
		set(layer[skin_tooltip].visible,false);
	</action>

	<action name="skin_hidehotspot_vr">
		txtadd(hotspot_vr,get(name),'_vr');
		set(hotspot[get(hotspot_vr)].visible,false);
	</action>

	<action name="skin_buttonglow">
		if('%1' !== 'null',
		set(strength,0.7);
		if(%2 != null, set(strength,%2));
		set(layer[skin_buttonglow].parent, %1);
		set(layer[skin_buttonglow].visible, true);
		tween(layer[skin_buttonglow].alpha, get(strength), 0.07);
		,
		tween(layer[skin_buttonglow].alpha, 0.0, 0.1, default,
		set(layer[skin_buttonglow].parent, null);
		set(layer[skin_buttonglow].visible, false);
		);
		);
	</action>


	<action name="skin_calc_opened_closed">
		set(layer[get(name)].y_opened, get(layer[get(name)].y));
		set(layer[get(name)].y_closed, calc(layer[get(name)].y - skin_settings.controlbar_offset - skin_settings.controlbar_height + skin_settings.controlbar_offset_closed));
	</action>


	<action name="skin_hideskin">
		if(layer[skin_map].state    != 'closed', skin_showmap(false);    wait(0.40); );
		if(layer[skin_thumbs].state != 'closed', skin_showthumbs(false); wait(0.25); );

		set(hidetime, calc('%1' == 'instant' ? 0.0 : 0.5));
		tween(layer[skin_scroll_window].y,   get(layer[skin_scroll_window  ].y_closed), get(hidetime));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_closed), get(hidetime));
		tween(layer[skin_control_bar].y,     get(layer[skin_control_bar    ].y_closed), get(hidetime));

		tween(layer[skin_btn_prev_fs].x, 0, get(hidetime));
		tween(layer[skin_btn_next_fs].x, 0, get(hidetime));

		if(layer[skin_logo], tween(layer[skin_logo].alpha, 0.0, 0.5, default, set(layer[skin_logo].visible,false)); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, true);
		delayedcall(skin_btn_show_alpha, get(hidetime), tween(layer[skin_btn_show].alpha, 0.25, 0.25); );
	</action>


	<action name="skin_showskin">
		tween(layer[skin_scroll_window  ].y, get(layer[skin_scroll_window  ].y_opened));
		tween(layer[skin_splitter_bottom].y, get(layer[skin_splitter_bottom].y_opened));
		tween(layer[skin_control_bar    ].y, get(layer[skin_control_bar    ].y_opened));

		tween(layer[skin_btn_prev_fs].x, -50);
		tween(layer[skin_btn_next_fs].x, -50);

		if(layer[skin_logo], set(layer[skin_logo].visible,true); tween(layer[skin_logo].alpha, 1.0); );

		stopdelayedcall(skin_btn_show_alpha);
		set(layer[skin_btn_show].visible, false);
		delayedcall(skin_btn_show_alpha, 0.25, tween(layer[skin_btn_show].alpha, 0.0, 0.0); );
	</action>


	<action name="skin_showthumbs">
		if(%1 == null, if(layer[skin_thumbs].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		if(show,
		set(layer[skin_thumbs].state, 'opened');
		tween(layer[skin_thumbs].alpha, 1.0, 0.25);
		tween(layer[skin_thumbs_container].y, 100, 0.5, easeOutQuint);
		,
		set(layer[skin_thumbs].state, 'closed');
		tween(layer[skin_thumbs].alpha, 0.0, 0.25, easeOutQuint);
		tween(layer[skin_thumbs_container].y, -100, 0.5, easeOutQuint);
		);
	</action>


	<action name="skin_showmap">
		if(%1 == null, if(layer[skin_map].state == 'closed', set(show,true), set(show,false)); , set(show,%1); );
		mul(mh, layer[skin_scroll_layer].pixelheight, -1);
		if(show,
		tween(layer[skin_thumbs_container].alpha, 0.0, 0.25, default, set(layer[skin_thumbs_container].visible,false));
		set(layer[skin_map].visible, true);
		tween(layer[skin_map].alpha, 1.0, 0.25);
		set(layer[skin_map].state, 'opened');
		sub(hh,area.pixelheight,skin_settings.controlbar_offset);
		sub(hh,layer[skin_control_bar].height);
		sub(hh,32);
		add(mh,hh);
		sub(hh,skin_settings.controlbar_overlap);
		copy(layer[skin_map].height, hh);
		tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint);
		,
		if(layer[skin_map].state != 'closed',
		set(layer[skin_map].state, 'closed');
		add(mh, layer[skin_scroll_layer].y_offset);
		tween(layer[skin_map].alpha, 0.0, 0.5, easeOutQuint);
		tween(layer[skin_scroll_layer].y, get(mh), 0.5, easeOutQuint, set(layer[skin_map].visible,false) );
		);
		);
	</action>


	<action name="skin_keydown_event">
		if(keycode == 33, skin_nextscene_loop(-1) );            	<!-- Page Up   - previous scene -->
		if(keycode == 34, skin_nextscene_loop(+1) );            	<!-- Page Dowm - next scene -->
		if(keycode == 35, skin_gotoscene(calc(scene.count-1)) );	<!-- End       - last scene -->
		if(keycode == 36, skin_gotoscene(0) );                  	<!-- Home/Pos1 - first scene -->
	</action>


	<action name="skin_deeplinking_update_url">
		if(skin_settings.deeplinking AND (!webvr OR webvr.isenabled === false),
		copy(adr, browser.location);
		indexoftxt(qi, get(adr), '?');
		if(qi GT 0, subtxt(adr, adr, 0, get(qi)));
		copy(si, scene[get(xml.scene)].index);
		copy(h, view.hlookat);
		copy(v, view.vlookat);
		copy(f, view.fov);
		copy(d, view.distortion);
		copy(a, view.architectural);
		clamp(d, 0.0, 1.0);
		clamp(a, 0.0, 1.0);
		set(pp, calc(f LT 10 ? 6 : 2));
		roundval(h, get(pp));
		roundval(v, get(pp));
		roundval(f, get(pp));
		roundval(d, 2);
		roundval(a, 1);
		set(adr, calc(adr + '?startscene=' + si + '&amp;startactions=lookat('+h+','+v+','+f+','+d+','+a+');'));
		js( history.replaceState(null, document.title, get(adr)); );
		);
	</action>


	<!-- reload the scene when there is a special image for VR -->
	<action name="skin_reloadscene_webvr">
		delayedcall(0.1,
		if(scene[get(xml.scene)].havevrimage,
		loadscene(get(xml.scene), null, MERGE|KEEPVIEW|KEEPMOVING|KEEPHOTSPOTS|NOPREVIEW, BLEND(0.5));
		);
		);
	</action>


	<!-- videopano support - http://krpano.com/plugins/videoplayer/ -->
	<action name="skin_video_addcontrols">
		set(events[skin_events].onclick, skin_video_clickevent() );

		set(plugin[video].onvideoready, skin_video_updatestate() );
		set(plugin[video].onvideoplay, skin_video_updatestate() );
		set(plugin[video].onvideopaused, skin_video_updatestate() );
		set(plugin[video].onvideocomplete, skin_video_updatestate() );

		if(plugin[video].ispaused AND plugin[video].pausedonstart,
		set(layer[skin_video_playpause].state, 'visible');
		set(layer[skin_video_playpause].enabled, true);
		tween(layer[skin_video_playpause].alpha, 1.0);
		);

		delayedcall(skin_video_delayedvisible, 0.25, set(layer[skin_video_controls].visible, true) );

		skin_video_updateseekbarwidth();
		set(layer[skin_video_seekpos].x,0);
		set(layer[skin_video_loadbar].width,0);

		setinterval(skin_video_seek_updates, 0.5, skin_video_updatetime() );
	</action>

	<action name="skin_video_removecontrols">
		stopdelayedcall(skin_video_delayedvisible);

		set(events[skin_events].onclick, null);

		set(layer[skin_video_playpause].alpha, 0.0);
		set(layer[skin_video_controls].visible, false);

		clearinterval(skin_video_seek_updates);
	</action>

	<action name="skin_video_updatetime">
		copy(t1, plugin[video].time);
		copy(t2, plugin[video].totaltime);
		if(%1 !== null, calc(t1, %1 * t2); );
		div(t1_min, t1, 60);
		mod(t1_sec, t1, 60);
		Math.floor(t1_min);
		Math.floor(t1_sec);
		div(t2_min, t2, 60);
		mod(t2_sec, t2, 60);
		Math.floor(t2_min);
		Math.floor(t2_sec);
		calc(layer[skin_video_time].html, t1_min + ':' + (t1_sec LT 10 ? '0' : '') + t1_sec + ' / ' + t2_min + ':' + (t2_sec LT 10 ? '0' : '') + t2_sec);
		calc(layer[skin_video_seekpos].x, (t1 / t2 * 100) + '%');
		calc(layer[skin_video_loadbar].width, (plugin[video].loadedbytes / plugin[video].totalbytes * 100) + '%');
	</action>

	<action name="skin_video_updateseekbarwidth">
		if(skin_settings.title,
		calc(layer[skin_video_seekbar_container].width, 0 - (32 + layer[skin_title].pixelwidth + layer[skin_video_time].pixelwidth));
		calc(layer[skin_video_seekbar_container].x, layer[skin_title].pixelwidth + 16);
		,
		calc(layer[skin_video_seekbar_container].width, 0 - (24 + layer[skin_video_time].pixelwidth));
		set(layer[skin_video_seekbar_container].x, 8);
		);
	</action>

	<action name="skin_video_ondownseeking">
		asyncloop(pressed,
		screentolayer(skin_video_seekbar, mouse.stagex,mouse.stagey, lx,ly);
		calc(seekpos, lx / layer[skin_video_seekbar].pixelwidth);
		clamp(seekpos, 0.0, 1.0);
		skin_video_updatetime(seekpos);
		,
		plugin[video].seek(calc((seekpos * 100) + '%'));
		);
	</action>

	<layer name="skin_video_playpause" keep="true"
		   style="skin_base|skin_glow" crop="0|640|64|64" scale="0.75"
		   align="center" alpha="0.0" autoalpha="true"
		   state="hidden"
		   onclick="skin_video_playpause_click();"
	/>

	<action name="skin_video_updatestate">
		calc(layer[skin_video_playpause].crop, plugin[video].ispaused ? '0|640|64|64' : '64|640|64|64');
		if(plugin[video].iscomplete,
		set(layer[skin_video_playpause].state, 'visible');
		tween(layer[skin_video_playpause].alpha, 1.0);
		);
	</action>

	<action name="skin_video_playpause_click">
		if(plugin[video].ispaused,
		plugin[video].play();
		set(layer[skin_video_playpause].state, 'hidden');
		tween(layer[skin_video_playpause].alpha, 0.0);
		,
		plugin[video].pause();
		set(layer[skin_video_playpause].state, 'visible');
		tween(layer[skin_video_playpause].alpha, 1.0);
		delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden'); tween(layer[skin_video_playpause].alpha, 0.0); );
		);
	</action>

	<action name="skin_video_clickevent">
		stopdelayedcall(autohide_pp);

		switch(layer[skin_video_playpause].state, 'visible', 'hidden');

		if(layer[skin_video_playpause].state == 'hidden',
		tween(layer[skin_video_playpause].alpha, 0.0);
		,
		tween(layer[skin_video_playpause].alpha, 1.0);
		delayedcall(autohide_pp, 2.0, set(layer[skin_video_playpause].state,'hidden'); tween(layer[skin_video_playpause].alpha, 0.0); );
		);
	</action>

	<!-- context menu - http://krpano.com/docu/xml/#contextmenu -->
	<contextmenu fullscreen="false" versioninfo="false">
		<item name="fs" caption="全屏" onclick="switch(fullscreen)"/>
		<item name="cc" caption="技术支持 - 优视全景 useevr.cn" onclick="js(window.open('http://www.useevr.cn'));"  separator="true" />
	</contextmenu>

	<!--添加评论-->
	<action name="add_comment">
		js(show_comment());
	</action>
	<!--背景音乐播放暂停-->
	<action name="switch_bgm">
		pausesoundtoggle(bgm);
		switch(crop, 66|780|64|64, 66|715|64|64);
	</action>
	<!--切换旋转按钮-->
	<action name="switch_xuanzhuan">
		switch(autorotate.enabled);
		if(autorotate.enabled==true,
		set(layer[skin_xz_btn_ico].crop,0|384|64|64);
		);
		if(autorotate.enabled==false,
		set(layer[skin_xz_btn_ico].crop,0|771|64|64);
		);

	</action>
</krpano>